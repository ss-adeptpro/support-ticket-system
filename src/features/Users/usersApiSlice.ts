import { apiSlice } from "../../api/apiSlice";
import { API_ENDPOINT_DEAFULT_TIMEOUT } from "../auth/auth.types";
import { TUsers } from "./users.types";

//assign tags for invalidating cache
const usersApiWithTag = apiSlice.enhanceEndpoints({addTagTypes: ["User"]})

//add endpoints for owners
export const usersApiSlice = usersApiWithTag.injectEndpoints({
  endpoints: builder => ({
    getUsers: builder.query<TUsers, void>({
      query: () => ({
        url: `/users`,
				validateStatus: (response, result) => {
          console.log(result,' responseValidate ', response);
          //without Token request, result comes back with error {message: "UnauthorizedM"}
          //and response {status:401, ok:false}
					return response.status === 200 && !result.isError
				},

        //if taking over > API_ENDPOINT_DEAFULT_TIMEOUTms, something is wrong so abort the request.
        //this timeout will take priority
        timeout: API_ENDPOINT_DEAFULT_TIMEOUT
      }),
      // providesTags: ["User"] //for caching
    })
  })
})

/*hooks for endpoints are autogenerated*/
export const {
  useGetUsersQuery
} = usersApiSlice

